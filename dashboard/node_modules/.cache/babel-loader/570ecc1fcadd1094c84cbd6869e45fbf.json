{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\fixel\\\\dashboard\\\\src\\\\Components\\\\Authentication\\\\Authentication.js\";\nimport React from \"react\";\nimport \"./Authentication.css\";\nimport Form from \"../Form/Form\";\nimport validations from \"../../Validations/Validations\";\nimport UserProfile from \"../UserProfile/UserProfile\";\nexport default function Authentication(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth_container\",\n      children: [false && /*#__PURE__*/_jsxDEV(Form, {\n        formLogo: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"authentication_logo\",\n          src: \"https://calcalistcareebiz.s3.eu-central-1.amazonaws.com/6288/2/6288636806425463443521_26.jpg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 15\n        }, this),\n        fields: {\n          email: \"\",\n          full_name: \"\",\n          password: \"\"\n        },\n        elements: [{\n          id: \"full_name\",\n          type: \"input\",\n          title: \"Full Name\",\n          placeholder: \"full name\",\n          customClass: \"full_name\",\n          validate: v => validations.full_name(v.toString().toLowerCase()),\n          errorMsg: \"First name has to be above 2 letters\"\n        }, {\n          id: \"email\",\n          type: \"input\",\n          title: \"Email\",\n          placeholder: \"Email\",\n          customClass: \"email\",\n          validate: v => validations.email(v.toString().toLowerCase()),\n          errorMsg: \"Email address is incorrect\"\n        }, {\n          id: \"password\",\n          type: \"input\",\n          title: \"Password\",\n          placeholder: \"password\",\n          customClass: \"password\",\n          validate: v => validations.password(v.toString().toLowerCase()),\n          errorMsg: \"password has to be above 6 letters\"\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this), false && /*#__PURE__*/_jsxDEV(ConfirmUser, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), false && /*#__PURE__*/_jsxDEV(UserProfile, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_c = Authentication;\n\nfunction ConfirmUser(props) {\n  return /*#__PURE__*/_jsxDEV(Form, {\n    formTitle: \"Please confirm email code\",\n    fields: {\n      user_confirmaton_code: \"\"\n    },\n    elements: [{\n      id: \"user_confirmaton_code\",\n      type: \"input\",\n      title: \"Confirmation code\",\n      placeholder: \"code\",\n      customClass: \"confirmation_code\",\n      validate: v => validations.email(v.toString().toLowerCase()),\n      errorMsg: \"Incorrect confirmation code typed :(\"\n    }]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = ConfirmUser;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Authentication\");\n$RefreshReg$(_c2, \"ConfirmUser\");","map":{"version":3,"sources":["D:/fixel/dashboard/src/Components/Authentication/Authentication.js"],"names":["React","Form","validations","UserProfile","Authentication","props","email","full_name","password","id","type","title","placeholder","customClass","validate","v","toString","toLowerCase","errorMsg","error","ConfirmUser","user_confirmaton_code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./Authentication.css\";\r\nimport Form from \"../Form/Form\";\r\nimport validations from \"../../Validations/Validations\";\r\nimport UserProfile from \"../UserProfile/UserProfile\";\r\nexport default function Authentication(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"auth_container\">\r\n        {false && (\r\n          <Form\r\n            formLogo={\r\n              <img\r\n                className=\"authentication_logo\"\r\n                src=\"https://calcalistcareebiz.s3.eu-central-1.amazonaws.com/6288/2/6288636806425463443521_26.jpg\"\r\n              />\r\n            }\r\n            fields={{ email: \"\", full_name: \"\", password: \"\" }}\r\n            elements={[\r\n              {\r\n                id: \"full_name\",\r\n                type: \"input\",\r\n                title: \"Full Name\",\r\n                placeholder: \"full name\",\r\n                customClass: \"full_name\",\r\n                validate: (v) =>\r\n                  validations.full_name(v.toString().toLowerCase()),\r\n                errorMsg: \"First name has to be above 2 letters\",\r\n              },\r\n\r\n              {\r\n                id: \"email\",\r\n                type: \"input\",\r\n                title: \"Email\",\r\n                placeholder: \"Email\",\r\n                customClass: \"email\",\r\n                validate: (v) => validations.email(v.toString().toLowerCase()),\r\n                errorMsg: \"Email address is incorrect\",\r\n              },\r\n              {\r\n                id: \"password\",\r\n                type: \"input\",\r\n                title: \"Password\",\r\n                placeholder: \"password\",\r\n                customClass: \"password\",\r\n                validate: (v) =>\r\n                  validations.password(v.toString().toLowerCase()),\r\n                errorMsg: \"password has to be above 6 letters\",\r\n              },\r\n            ]}\r\n          />\r\n        )}\r\n        {false && <ConfirmUser />}\r\n      </div>\r\n      {false && <UserProfile />}\r\n      <Toast error={error} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ConfirmUser(props) {\r\n  return (\r\n    <Form\r\n      formTitle={\"Please confirm email code\"}\r\n      fields={{ user_confirmaton_code: \"\" }}\r\n      elements={[\r\n        {\r\n          id: \"user_confirmaton_code\",\r\n          type: \"input\",\r\n          title: \"Confirmation code\",\r\n          placeholder: \"code\",\r\n          customClass: \"confirmation_code\",\r\n          validate: (v) => validations.email(v.toString().toLowerCase()),\r\n          errorMsg: \"Incorrect confirmation code typed :(\",\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}